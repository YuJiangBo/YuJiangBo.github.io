<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springboot整合JDBC</title>
      <link href="/2020/07/27/springboot-zheng-he-jdbc/"/>
      <url>/2020/07/27/springboot-zheng-he-jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot整合JDBC"><a href="#springboot整合JDBC" class="headerlink" title="springboot整合JDBC"></a>springboot整合JDBC</h1><blockquote><p>创建springboot项目，选择如下依赖</p></blockquote><p><img src="/images/springboot%E6%95%B4%E5%90%88JDBC/dependence.png" alt=""></p><p><strong>或者直接在springboot项目中导入如下依赖</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    web    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--JDBC--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--MySQL--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><blockquote><p>配置数据源</p></blockquote><pre class=" language-yml"><code class="language-yml">#数据源spring:  datasource:    username: root    password: root    url: jdbc:mysql://localhost:3306/employ_manage    driver-class-name: com.mysql.jdbc.Driver</code></pre><blockquote><p>JDBCTemplate</p></blockquote><p>1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</p><p>2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</p><p>3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p><p>4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p><p>5、JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p><p><strong>JdbcTemplate主要提供以下几类方法：</strong></p><ul><li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li><li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li><li>query方法及queryForXXX方法：用于执行查询相关语句；</li><li>call方法：用于执行存储过程、函数相关语句。</li></ul><blockquote><p>这里就简单用一个controller测试</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getuser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> <span class="token function">userlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> users <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/adduser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into user (name,password) values ('zxc','123')"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"add ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/updateuser/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update user set name=?,password=? where id="</span><span class="token operator">+</span>id<span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">;</span>        obj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"update ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteuser/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"delete from user where id=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"delete ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>结果</p></blockquote><p><img src="/images/springboot%E6%95%B4%E5%90%88JDBC/getUser.png" alt=""></p><p><img src="/images/springboot%E6%95%B4%E5%90%88JDBC/addUser.png" alt=""></p><p><img src="/images/springboot%E6%95%B4%E5%90%88JDBC/db.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringbootError400</title>
      <link href="/2020/07/24/springbooterror400/"/>
      <url>/2020/07/24/springbooterror400/</url>
      
        <content type="html"><![CDATA[<h1 id="学Springboot时遇到的Error400错误"><a href="#学Springboot时遇到的Error400错误" class="headerlink" title="学Springboot时遇到的Error400错误"></a>学Springboot时遇到的Error400错误</h1><p>找了半天的   bad request ，status = 400 的bug，终于找到原因了<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>,对于我这样的小白来说真的头大</p><blockquote><p>具体错误</p></blockquote><p>先是从登录页面输入username和password，结果报了个bad request,status=400的错 本来 ？后面是要跟参数的，但是发现并没有</p><p><img src="/images/springbootError400/2020-07-24-02.png" alt=""></p><blockquote><p>错误原因</p></blockquote><p>@RequestParam这里获取前端的数据是根据name属性传递的</p><p><img src="/images/springbootError400/2020-07-24-03.png" alt=""></p><p><img src="/images/springbootError400/2020-07-24-04.png" alt=""></p><blockquote><p>加上之后</p></blockquote><p><img src="/images/springbootError400/2020-07-24-05.png" alt=""></p><blockquote><p>成功访问</p></blockquote><p><img src="/images/springbootError400/2020-07-24-06.png" alt=""></p><blockquote><p>以上是个人解决办法，记录一下，防止以后踩坑 ::</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
            <tag> springboot </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yml语法</title>
      <link href="/2020/07/21/yml-yu-fa-xue-xi/"/>
      <url>/2020/07/21/yml-yu-fa-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="yml语法学习"><a href="#yml语法学习" class="headerlink" title="yml语法学习"></a>yml语法学习</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>springboot使用了全局配置文件，配置文件名称是固定的（application）</p><ul><li><p>application.properties</p></li><li><ul><li>语法结构 ：key=value</li></ul></li><li><p>application.yml / application.yaml</p></li><li><ul><li>语法结构 ：key: value  (key:空格value)</li></ul></li></ul><p><strong>配置文件的作用 ：</strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</p><p>比如我们可以在配置文件中修改Tomcat 默认启动的端口号！测试一下！</p><ul><li>yaml中：</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span></code></pre><ul><li>properties中：</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span></code></pre><h2 id="yml-yaml基础语法"><a href="#yml-yaml基础语法" class="headerlink" title="yml / yaml基础语法"></a>yml / yaml基础语法</h2><p>yml / yaml中语法要求非常严格</p><ul><li>空格不能省略</li><li>以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</li><li>属性和值的大小写都是十分敏感的。</li></ul><p><strong>字面量：普通的值  [ 数字，布尔值，字符串  ]</strong></p><blockquote><p>k: v    (一定注意英文冒号后面的空格)</p></blockquote><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</p><p>注意：</p><ul><li><p>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p><p>比如 ：name: “hello \n world”  输出 ：hello  换行  world</p></li><li><p>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p><p>比如 ：name: ‘hello \n world’  输出 ：hello  \n  world</p></li></ul><p><strong>在表示数组时（list、set）</strong></p><p>用‘ - ’表示每一个元素</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> cat    <span class="token punctuation">-</span> dog    <span class="token punctuation">-</span> pig</code></pre><p>行内写法：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span></code></pre><p><strong>在表示对象、Map时（键值对）</strong></p><p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#格式</span><span class="token comment" spellcheck="true">#k: </span><span class="token comment" spellcheck="true">#    v1:</span><span class="token comment" spellcheck="true">#    v2:</span><span class="token comment" spellcheck="true">#例子</span><span class="token key atrule">student</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> zhangsan    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">21</span></code></pre><p>行内写法</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">student</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> zhangsan<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">}</span></code></pre><p><strong>end</strong></p><p>本篇文章为个人学习笔记，参照dalao狂神说，特此<strong>感谢</strong>！</p><p>参照博客：<a href="https://www.cnblogs.com/hellokuangshen/p/12457000.html" target="_blank" rel="noopener">https://www.cnblogs.com/hellokuangshen/p/12457000.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> yml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TestBlog</title>
      <link href="/2020/07/19/testblog2/"/>
      <url>/2020/07/19/testblog2/</url>
      
        <content type="html"><![CDATA[<h1 id="测试用"><a href="#测试用" class="headerlink" title="测试用"></a>测试用</h1><p>Test Blog</p><blockquote><p>代码高亮</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navContainer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-wrapper container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand-logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waves-effect waves-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/medias/logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOGO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-span<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Yblog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><blockquote><p>图片</p></blockquote><p><img src="https://yujiangbo.github.io/2020/07/19/testblog2/pic1.jpg" alt="测试图片"></p><img src="/images/pic1.jpg"><p><img src="/images/pic1.jpg" alt=""></p><blockquote><p>链接</p></blockquote><p><a href="https://yujiangbo.github.io/2020/07/16/ce-shi-bo-ke/" target="_blank" rel="noopener">测试链接</a></p><p><strong>end</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> testBlog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo新建博客报错</title>
      <link href="/2020/07/16/hexo-xin-jian-bo-ke-bao-cuo/"/>
      <url>/2020/07/16/hexo-xin-jian-bo-ke-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="新建博客时遇到的错误"><a href="#新建博客时遇到的错误" class="headerlink" title="新建博客时遇到的错误"></a>新建博客时遇到的错误</h1><p>在用<span style="background-color:black;color:white">hexo n XXXX</span>新建博客时出现了下面的错误，最开始以为是文件名含有中文所以不支持，但改为英文后还是不行，最后自己摸索加上百度解决了这个问题。</p><p><strong>具体错误</strong></p><blockquote><p>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 5:</p><p>tags:</p></blockquote><p>如图：</p><p><img src="/images/new-blog-error/hexo2020-7-21-02.png" alt=""></p><p><strong>解决方法</strong></p><p>要用英文状态下的冒号，且冒号后面要加空格</p><p><img src="/images/new-blog-error/hexo2020-7-21-04.jpg" alt=""></p><p><strong>最后可以了，效果</strong></p><p><img src="/images/new-blog-error/hexo2020-7-21-03.png" alt=""></p><p><strong>另外 添加标签时还有一点小错误</strong></p><p>不过通过修改已经好了</p><p><img src="/images/new-blog-error/hexo2020-7-22-01.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
